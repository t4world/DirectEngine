Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
};

struct PixelInputType
{
	float4 position:SV_POSITION;
	float2 tex:TEXCOORD0;
	float3 normal:NORMAL;
	float  clip:SV_ClipDistance0;
};

float4 RefractionPixelShader(PixelInputType input):SV_TARGET
{
	float4 textureColor;
	float4 color;
	float4 diffuseColor;
	float3 lightDir;
	float lightIdentity;

	textureColor = shaderTexture.Sample(SampleType,input.tex);
	color = ambientColor;
	lightDir = -lightDirection;
	lightIdentity = saturate(dot(input.normal,lightDir));
	if(lightIdentity > 0.0f)
	{
		color += (diffuseColor * lightIdentity);
	}
	color = saturate(color);
	color = color * textureColor;
	return color;
}