Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float  specularPower;
	float4 specularColor;
};

struct PixelInputType
{
	float4 position:SV_POSITION;
	float2 tex:TEXCOORD0;
	float3 normal:NORMAL;
	float3 viewDirection:TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input):SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float3 reflection;
	float4 specular;
	float4 color;
	textureColor = shaderTexture.Sample(SampleType,input.tex);
	//Set the default output color to the ambient light value for all pixels
	color = ambientColor;
	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);
	lightDir = -lightDirection;
	lightIntensity = saturate(dot(input.normal,lightDir));
	//color = saturate(diffuseColor * lightIntensity);
	if(lightIntensity > 0.0f)
	{
		color += (diffuseColor * lightIntensity);
		color = saturate(color);
		//Calculate the reflection vector based on the light intensity.normal vector,and light direction.
		reflection = (2 * lightIntensity * input.normal - lightDir);
		specular = pow(saturate(dot(reflection,input.viewDirection)),specularPower);
	}
	color = color * textureColor;
	//Add the specular component last to the output color.
	color = saturate(color + specular);
	return color;
}